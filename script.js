function updateDateTime() {
    const now = new Date();

    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    document.getElementById('clock').textContent = `${hours}:${minutes}:${seconds}`;

    const days = ['Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y'];
    const dayName = days[now.getDay()];
    const date = String(now.getDate()).padStart(2, '0');
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const year = now.getFullYear();
    document.getElementById('date').textContent = `${dayName}, ${date}/${month}/${year}`;
}

async function fetchWeather() {
    const weatherElement = document.getElementById('weather');

    try {
        let position = null;
        try {
            position = await new Promise((resolve, reject) => {
                navigator.geolocation.getCurrentPosition(resolve, reject, {
                    timeout: 5000,
                    maximumAge: 60000
                });
            });
        } catch (geoError) {
            console.log('Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠, s·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi)');
            position = {
                coords: {
                    latitude: 21.0285,
                    longitude: 105.8542
                }
            };
        }

        const { latitude, longitude } = position.coords;

        const response = await fetch(
            `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true&timezone=auto`
        );

        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt');
        }

        const data = await response.json();

        const temperature = Math.round(data.current_weather.temperature);
        const weatherCode = data.current_weather.weathercode;

        weatherElement.innerHTML = `
            <div class="weather-container">
                <div class="weather-location">${getLocationName(latitude, longitude)}</div>
                <div class="weather-icon">${getWeatherIcon(weatherCode)}</div>
                <div class="weather-temperature">${temperature}¬∞C</div>
                <div class="weather-description">${getWeatherDescription(weatherCode)}</div>
                <div class="weather-details">Gi√≥: ${Math.round(data.current_weather.windspeed)} km/h</div>
            </div>
        `;
    } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt:', error);
        weatherElement.innerHTML = `
            <div class="error">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt. ${error.message}</div>
        `;
    }
}

function getWeatherDescription(code) {
    const descriptions = {
        0: 'Tr·ªùi quang',
        1: 'Ch·ªß y·∫øu quang',
        2: 'M√¢y r·∫£i r√°c',
        3: 'Nhi·ªÅu m√¢y',
        45: 'S∆∞∆°ng m√π',
        48: 'S∆∞∆°ng m√π gi√°',
        51: 'M∆∞a ph√πn nh·∫π',
        53: 'M∆∞a ph√πn v·ª´a',
        55: 'M∆∞a ph√πn d√†y',
        56: 'M∆∞a ph√πn ƒë√≥ng bƒÉng nh·∫π',
        57: 'M∆∞a ph√πn ƒë√≥ng bƒÉng d√†y',
        61: 'M∆∞a nh·∫π',
        63: 'M∆∞a v·ª´a',
        65: 'M∆∞a n·∫∑ng h·∫°t',
        66: 'M∆∞a ƒë√≥ng bƒÉng nh·∫π',
        67: 'M∆∞a ƒë√≥ng bƒÉng n·∫∑ng',
        71: 'Tuy·∫øt nh·∫π',
        73: 'Tuy·∫øt v·ª´a',
        75: 'Tuy·∫øt n·∫∑ng',
        77: 'H·∫°t tuy·∫øt',
        80: 'M∆∞a r√†o nh·∫π',
        81: 'M∆∞a r√†o v·ª´a',
        82: 'M∆∞a r√†o n·∫∑ng',
        85: 'Tuy·∫øt r√†o nh·∫π',
        86: 'Tuy·∫øt r√†o n·∫∑ng',
        95: 'Gi√¥ng b√£o',
        96: 'Gi√¥ng b√£o k√®m m∆∞a ƒë√° nh·∫π',
        99: 'Gi√¥ng b√£o k√®m m∆∞a ƒë√° n·∫∑ng'
    };
    return descriptions[code] || 'Kh√¥ng x√°c ƒë·ªãnh';
}

function getWeatherIcon(code) {
    const icons = {
        0: '‚òÄÔ∏è',  // Tr·ªùi quang
        1: 'üå§Ô∏è',  // Ch·ªß y·∫øu quang
        2: '‚õÖ',  // M√¢y r·∫£i r√°c
        3: '‚òÅÔ∏è',  // Nhi·ªÅu m√¢y
        45: 'üå´Ô∏è', // S∆∞∆°ng m√π
        48: 'üå´Ô∏è', // S∆∞∆°ng m√π gi√°
        51: 'üåßÔ∏è', // M∆∞a ph√πn nh·∫π
        53: 'üåßÔ∏è', // M∆∞a ph√πn v·ª´a
        55: 'üåßÔ∏è', // M∆∞a ph√πn d√†y
        56: 'üåßÔ∏è‚ùÑÔ∏è', // M∆∞a ph√πn ƒë√≥ng bƒÉng
        57: 'üåßÔ∏è‚ùÑÔ∏è', // M∆∞a ph√πn ƒë√≥ng bƒÉng d√†y
        61: 'üåßÔ∏è', // M∆∞a nh·∫π
        63: 'üåßÔ∏è', // M∆∞a v·ª´a
        65: 'üåßÔ∏è', // M∆∞a n·∫∑ng h·∫°t
        66: 'üåßÔ∏è‚ùÑÔ∏è', // M∆∞a ƒë√≥ng bƒÉng nh·∫π
        67: 'üåßÔ∏è‚ùÑÔ∏è', // M∆∞a ƒë√≥ng bƒÉng n·∫∑ng
        71: '‚ùÑÔ∏è',  // Tuy·∫øt nh·∫π
        73: '‚ùÑÔ∏è',  // Tuy·∫øt v·ª´a
        75: '‚ùÑÔ∏è',  // Tuy·∫øt n·∫∑ng
        77: '‚ùÑÔ∏è',  // H·∫°t tuy·∫øt
        80: 'üåßÔ∏è', // M∆∞a r√†o nh·∫π
        81: 'üåßÔ∏è', // M∆∞a r√†o v·ª´a
        82: 'üåßÔ∏è', // M∆∞a r√†o n·∫∑ng
        85: '‚ùÑÔ∏è',  // Tuy·∫øt r√†o nh·∫π
        86: '‚ùÑÔ∏è',  // Tuy·∫øt r√†o n·∫∑ng
        95: '‚õàÔ∏è',  // Gi√¥ng b√£o
        96: '‚õàÔ∏è',  // Gi√¥ng b√£o k√®m m∆∞a ƒë√°
        99: '‚õàÔ∏è'   // Gi√¥ng b√£o k√®m m∆∞a ƒë√° n·∫∑ng
    };
    return icons[code] || 'üå§Ô∏è';
}


function getLocationName(lat, lng) {
    if (lat >= 20.8 && lat <= 21.2 && lng >= 105.7 && lng <= 106.0) {
        return "H√† N·ªôi, Vi·ªát Nam";
    } else if (lat >= 10.7 && lat <= 10.9 && lng >= 106.6 && lng <= 106.8) {
        return "TP.HCM, Vi·ªát Nam";
    } else {
        return `Vƒ© ƒë·ªô: ${lat.toFixed(2)}, Kinh ƒë·ªô: ${lng.toFixed(2)}`;
    }
}

setInterval(updateDateTime, 1000);
updateDateTime(); 


fetchWeather();
setInterval(fetchWeather, 30 * 60 * 1000);